#!/usr/bin/env python
import os

Import("env")
Import("env_modules")

env_module = env_modules.Clone()

sources = Glob("*.cpp")
sources += Glob("tove2d/src/cpp/*.cpp")
sources += Glob("tove2d/src/cpp/mesh/*.cpp")
sources += Glob("tove2d/src/cpp/shader/*.cpp")
sources += Glob("tove2d/src/cpp/gpux/*.cpp")
sources += Glob("tove2d/src/thirdparty/*.cpp")
sources += Glob("tove2d/src/thirdparty/polypartition/src/*.cpp")
sources += Glob("tove2d/src/thirdparty/tinyxml2/tinyxml2.cpp")

env_module.Append(CPPDEFINES=["TOVE_GODOT"])
env_module.Append(CPPPATH=[os.path.realpath(os.curdir), "#modules/gdextensions", "tove2d/src/thirdparty/fp16/include"])


def package_sl(target, source, env):
    with open(source[0].abspath, "r") as sl:
        with open(target[0].abspath, "w") as out:
            out.write('w << R"GLSL(\n')
            out.write(sl.read())
            out.write(')GLSL";\n')


env_module.Append(BUILDERS={"PackageSL": Builder(action=package_sl)})

env_module.PackageSL("tove2d/src/glsl/fill.frag.inc", Glob("tove2d/src/glsl/fill.frag"))

env_module.PackageSL("tove2d/src/glsl/line.vert.inc", Glob("tove2d/src/glsl/line.vert"))

# Compile as a static library
lib = env_module.Library("gd_vector_graphics", sources)
# Add the library as a dependency of the final executable
env.Prepend(LIBS=[lib])
